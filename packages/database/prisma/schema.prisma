// Prisma schema for Business CMS
// Shared database schema for both admin and public website

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin user authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // bcrypt hashed
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Service categories (Дейности)
model Category {
  id             String    @id @default(cuid())
  titleBg        String    @unique // Bulgarian title
  titleEn        String    @unique // English title
  slug           String    @unique // URL-safe English slug
  descriptionBg  String    @db.Text // Bulgarian description
  descriptionEn  String    @db.Text // English description
  iconName       String?   // Optional: lucide-react icon name if suitable icon exists
  order          Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projects       Project[]

  @@index([slug])
}

// Construction projects
model Project {
  id          String         @id @default(cuid())

  // Basic Info (bilingual)
  titleBg     String
  titleEn     String
  slug        String         @unique
  descriptionBg String       @db.Text
  descriptionEn String       @db.Text

  // Project Details (bilingual)
  locationBg    String       // "гр. София, бул. Цариградско шосе 125"
  locationEn    String       // "Sofia, Tsarigradsko Shosse Blvd 125"
  workNatureBg  String?      @db.Text // "Характер на работите" (optional)
  workNatureEn  String?      @db.Text

  // Technical Info (bilingual where needed)
  constructionGroupBg String? // "1ва до 5та" (optional)
  constructionGroupEn String? // "1st to 5th"
  roleBg        String?      // "Главен изпълнител" (optional)
  roleEn        String?      // "Main Contractor"

  // Technical Specifications (bilingual long text)
  specificationsBg String?   @db.Text // Multiple paragraphs of details
  specificationsEn String?   @db.Text

  // Map Integration
  region        String       // "Sofia", "Varna" - matches REGION_NAMES keys in map-data.ts
  mapX          Float        // SVG coordinate (0-1000)
  mapY          Float        // SVG coordinate (0-651)

  // Media
  heroImageUrl  String       // Cloudinary public ID for main card image

  // Status
  featured      Boolean      @default(false) // Show on homepage featured section

  // Relations
  categoryId    String
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  clientId      String
  client        Client       @relation(fields: [clientId], references: [id], onDelete: Restrict)
  images        ProjectImage[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([slug])
  @@index([categoryId])
  @@index([clientId])
  @@index([region])
  @@index([featured])
}

// Project gallery images stored on Cloudinary
model ProjectImage {
  id                String   @id @default(cuid())
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cloudinaryPublicId String  // e.g., "projects/train-station-gallery-1"
  order             Int      @default(0) // Display order in gallery
  createdAt         DateTime @default(now())

  @@index([projectId])
  @@index([order])
}

// Client companies
model Client {
  id        String    @id @default(cuid())
  nameBg    String
  nameEn    String
  logoUrl   String?   // Cloudinary URL (optional)
  website   String?   // Optional website
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]

  @@index([order])
  @@index([nameBg])
  @@index([nameEn])
}

// Quality certificates
model Certificate {
  id                   String   @id @default(cuid())
  titleBg              String   @map("title")
  titleEn              String
  cloudinaryPublicIdBg String
  cloudinaryPublicIdEn String
  order                Int      @default(0)

  // Timeline feature fields
  isFeaturedInTimeline Boolean  @default(false)
  timelineYear         String?  // e.g., "2008", "2020"
  timelineIconName     String?  // Lucide icon name (e.g., "Award", "Shield")

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([order])
  @@index([isFeaturedInTimeline])
}

// Machinery Categories
model MachineryCategory {
  id        String           @id @default(cuid())
  nameBg    String           // "Верижни багери"
  nameEn    String           // "Tracked Excavators"
  count     Int              // Total count (sum of all models, or manual override)
  imageUrl  String           // Cloudinary URL for category card
  order     Int              @default(0)
  models    MachineryModel[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([order])
}

// Individual Machinery Models
model MachineryModel {
  id         String            @id @default(cuid())
  categoryId String
  category   MachineryCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  nameBg     String            // Bulgarian name
  nameEn     String            // English name
  count      Int               // Numeric count: 1, 2, 15, 15000
  unit       MachineryUnit     @default(PIECES)
  order      Int               @default(0) // Display order within category

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([categoryId])
  @@index([order])
}

enum MachineryUnit {
  PIECES          // бр. / pcs.
  SQUARE_METERS   // м²
}

// Contact form submissions
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([read])
}

// Site settings (homepage stats, company info)
model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  updatedAt DateTime @updatedAt

  @@index([key])
}

// Policy documents
model Policy {
  id                   String   @id @default(cuid())
  titleBg              String
  titleEn              String
  subtitleBg           String
  subtitleEn           String
  cloudinaryPublicIdBg String   // Bulgarian PDF
  cloudinaryPublicIdEn String   // English PDF
  order                Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([order])
}
